# Copyright 2010-2021, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("//converter:evaluation.bzl", "evaluation")

package(default_visibility = ["//:__subpackages__"])

exports_files(
    srcs = ["id.def"],
    visibility = [
        "//converter:__pkg__",  # for :converter_main
        "//data_manager:__subpackages__",
    ],
)

exports_files(
    srcs = [
        "collocation.txt",
        "collocation_suppression.txt",
        "connection_single_column.txt",
        "reading_correction.tsv",
        "suffix.txt",
        "suggestion_filter.txt",
    ],
    visibility = ["//data_manager:__subpackages__"],
)

exports_files(
    # dictionary00.txt is used in system_dictionary_test.cc.
    srcs = ["dictionary00.txt"],
    visibility = ["//dictionary/system:__pkg__"],
)

filegroup(
    name = "base_dictionary_data",
    srcs = [
        "mozcdic-ut0425あ.txt",
        "mozcdic-ut0425い.txt",
        "mozcdic-ut0425う.txt",
        "mozcdic-ut0425え.txt",
        "mozcdic-ut0425お.txt",
        "mozcdic-ut0425か.txt",
        "mozcdic-ut0425き.txt",
        "mozcdic-ut0425く.txt",
        "mozcdic-ut0425け.txt",
        "mozcdic-ut0425こ.txt",
        "mozcdic-ut0425さ.txt",
        "mozcdic-ut0425し.txt",
        "mozcdic-ut0425す.txt",
        "mozcdic-ut0425せ.txt",
        "mozcdic-ut0425そ.txt",
        "mozcdic-ut0425た.txt",
        "mozcdic-ut0425ち.txt",
        "mozcdic-ut0425つ.txt",
        "mozcdic-ut0425て.txt",
        "mozcdic-ut0425と.txt",
        "mozcdic-ut0425な.txt",
        "mozcdic-ut0425に.txt",
        "mozcdic-ut0425ぬ.txt",
        "mozcdic-ut0425ね.txt",
        "mozcdic-ut0425の.txt",
        "mozcdic-ut0425は.txt",
        "mozcdic-ut0425ひ.txt",
        "mozcdic-ut0425ふ.txt",
        "mozcdic-ut0425へ.txt",
        "mozcdic-ut0425ほ.txt",
        "mozcdic-ut0425ま.txt",
        "mozcdic-ut0425み.txt",
        "mozcdic-ut0425む.txt",
        "mozcdic-ut0425め.txt",
        "mozcdic-ut0425も.txt",
        "mozcdic-ut0425や.txt",
        "mozcdic-ut0425ゆ.txt",
        "mozcdic-ut0425よ.txt",
        "mozcdic-ut0425ら.txt",
        "mozcdic-ut0425り.txt",
        "mozcdic-ut0425る.txt",
        "mozcdic-ut0425れ.txt",
        "mozcdic-ut0425ろ.txt",
        "mozcdic-ut0425わ.txt",
        "mozcdic-ut0425を.txt",
        "mozcdic-ut0425ん.txt",
        "//dictionary:zip_code_data",
    ],
    visibility = ["//visibility:private"],
)

filegroup(
    name = "dictionary_data",
    srcs = [
        ":aux_dictionary",
        ":filtered_dictionary",
    ],
)

genrule(
    name = "aux_dictionary",
    srcs = [
        "aux_dictionary.tsv",
        "id.def",
        ":base_dictionary_data",
        "//data/dictionary_manual",
    ],
    outs = ["aux_dictionary.txt"],
    cmd = """
        $(location //dictionary:gen_aux_dictionary) \
        --strict --output $@ \
        --aux_tsv $(location :aux_dictionary.tsv) \
        --id_def $(location :id.def) \
        --words_tsv $(locations //data/dictionary_manual) \
        --dictionary_txts $(locations :base_dictionary_data)
    """,
    tools = ["//dictionary:gen_aux_dictionary"],
)

genrule(
    name = "filtered_dictionary",
    srcs = [
        "dictionary_filter.tsv",
        ":base_dictionary_data",
    ],
    outs = ["dictionary.txt"],
    cmd = """
        $(location //dictionary:gen_filtered_dictionary) --output $@ \
        --filter_tsv $(location :dictionary_filter.tsv) \
        --dictionary_txts $(locations :base_dictionary_data)
    """,
    tools = ["//dictionary:gen_filtered_dictionary"],
)

evaluation(
    name = "evaluation",
    outs = ["evaluation_updated.tsv"],
    base_file = "evaluation.tsv",
    data_file = "//data_manager/oss:mozc_dataset_for_oss",
    data_type = "oss",
    engine_type = "desktop",
    test_files = [
        "//data/test/quality_regression_test:oss.tsv",
        "//data/test/quality_regression_test:regression.tsv",
    ],
)

# Check if the output of `:evalution` is the same as `evalution.tsv`.
# If this test fails, you need to update evaluation.tsv.
# % blaze build ...:evaluation
# % cp blaze-genfiles/.../evaluation_updated.tsv .../evaluation.tsv
diff_test(
    name = "evaluation_diff_test",
    failure_message = "You need to update evaluation.tsv. See the BUILD file",
    file1 = "evaluation.tsv",
    file2 = ":evaluation",
)
